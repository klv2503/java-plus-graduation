spring:
  application:
    name: analyzer
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:6543/ewm_stats}
    username: ${DATABASE_USERNAME:user}
    password: ${DATABASE_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
  sql:
    init:
      mode: always
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        format_sql: true
server:
  port: 0

logging:
  level:
    ru.yandex.practicum.analyzer: TRACE
    org:
      springframework: ERROR
      apache.kafka: WARN

analyzer:
  kafka:
    consumers:
      similarity:
        properties:
          bootstrap.servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
          group.id: "stat.analyzer.similarities"
          client.id: ${KAFKA_ANALYZER_CLIENT_ID:stat.analyzer.similarity}
          key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
          value.deserializer: ru.yandex.practicum.kafka.deserializer.EventSimilarityAvroDeserializer
          auto.offset.reset: earliest
        topics:
          - "stats.events-similarity.v1"
        poll-timeout: 500ms
      action:
        properties:
          bootstrap.servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
          group.id: "stats.analyzer.user-action"
          client.id: ${KAFKA_ANALYZER_CLIENT_ID:stat.analyzer.action}
          key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
          value.deserializer: ru.yandex.practicum.kafka.deserializer.UserActionAvroDeserializer
          auto.offset.reset: earliest
        topics:
          - "stats.user-actions.v1"
        poll-timeout: 500ms
grpc:
  server:
    port: 0
  client:
    analyzer:
      address: ${GRPC_ANALYZER_ADDRESS:static://localhost:59090}
      enableKeepAlive: true
      keepAliveWithoutCalls: true
      negotiationType: plaintext